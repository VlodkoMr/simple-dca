import {useEffect, useState} from "react";
import {useIsMounted} from "usehooks-ts";
import {useNetwork, usePublicClient} from "wagmi";
import {Contract, ContractCodeStatus, ContractName, contracts} from "~~/utils/scaffold-eth/contract";
import {getNetwork} from "@wagmi/core";

/**
 * Gets the matching contract info from the contracts file generated by `yarn deploy`
 * @param contractName - name of deployed contract
 * @param chainId - name of deployed contract
 */
export const useDeployedContractInfo = <TContractName extends ContractName>(contractName: TContractName, chainId: number | null = null) => {
  const isMounted = useIsMounted();
  const {chain} = useNetwork();
  const deployedContract = contracts?.[chainId || chain?.id]?.[
    contractName as ContractName
    ] as Contract<TContractName>;
  const [status, setStatus] = useState<ContractCodeStatus>(ContractCodeStatus.LOADING);
  const publicClient = usePublicClient({chainId});

  useEffect(() => {
    const checkContractDeployment = async () => {
      if (!deployedContract) {
        setStatus(ContractCodeStatus.NOT_FOUND);
        return;
      }
      const code = await publicClient.getBytecode({
        address: deployedContract.address,
      });

      if (!isMounted()) {
        return;
      }
      // If contract code is `0x` => no contract deployed on that address
      if (code === "0x") {
        setStatus(ContractCodeStatus.NOT_FOUND);
        return;
      }
      setStatus(ContractCodeStatus.DEPLOYED);
    };

    checkContractDeployment();
  }, [isMounted, contractName, deployedContract, publicClient]);

  return {
    data: status === ContractCodeStatus.DEPLOYED ? deployedContract : undefined,
    isLoading: status === ContractCodeStatus.LOADING,
  };
};
